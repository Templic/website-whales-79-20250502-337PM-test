Additional Header Component Details
15. Accessibility Enhancements
ARIA Attributes

// Mobile Menu Button
<button
  type="button"
  className="inline-flex md:hidden items-center justify-center p-2 rounded-md text-white"
  aria-controls="mobile-menu"
  aria-expanded={isMobileMenuOpen}
  aria-label="Toggle navigation menu"
>
  {/* Button content */}
</button>

// Navigation links
<Link
  key={item.path}
  href={item.path}
  aria-current={location === item.path ? "page" : undefined}
>
  {/* Link content */}
</Link>

Focus States

/* Add these styles to your CSS */
.nav-link:focus-visible {
  outline: 2px solid #06b6d4; /* cyan-500 */
  outline-offset: 2px;
  border-radius: 0.25rem;
}

.search-input:focus-visible {
  outline: none;
  ring-offset-2;
  ring-2;
  ring-cyan-400;
}

16. Sacred Geometry Background

Add to the header for subtle geometric patterns:

<div className="absolute inset-0 pointer-events-none overflow-hidden opacity-5">
  <SacredGeometry 
    type="merkaba" 
    className="absolute -top-20 -right-20 w-64 h-64 text-cyan-400" 
    animate={true}
  />
  <SacredGeometry 
    type="flower-of-life" 
    className="absolute -bottom-40 -left-40 w-96 h-96 text-purple-400" 
    animate={true}
  />
</div>

17. User Menu Component

Add this after the search component:

{/* User Menu */}
{user ? (
  <div className="relative ml-2">
    <button
      className="flex items-center space-x-1 focus:outline-none"
      aria-expanded="false"
      aria-haspopup="true"
      onClick={() => {/* Toggle user menu */}}
    >
      <div className="h-8 w-8 rounded-full bg-gradient-to-br from-cyan-500 to-purple-600 flex items-center justify-center text-white">
        {user.name.charAt(0).toUpperCase()}
      </div>
    </button>
    
    {/* User dropdown menu here */}
  </div>
) : (
  <button 
    className="ml-2 px-3 py-1.5 rounded-md bg-gradient-to-r from-cyan-500 to-purple-600 text-white text-sm font-medium hover:from-cyan-600 hover:to-purple-700 transition-colors"
    onClick={() => navigate('/login')}
  >
    Login
  </button>
)}

18. Header Animation Effects
Main Header Transition on Scroll

Update header styles for smooth height transition:

<header 
  className={`
    fixed top-0 z-[100] w-full 
    backdrop-blur-lg border-b border-white/5 
    transition-all duration-300 ease-in-out
    ${isScrolled ? 'h-16 bg-black/90' : 'h-20 bg-black/50'}
  `}
>
  {/* Header content */}
</header>

Logo Animation

Enhance the logo animation:

const LogoAnimation = () => {
  return (
    <div className="absolute inset-0 z-0">
      <div className="absolute inset-0 rounded-full bg-gradient-to-br from-cyan-500 to-purple-600 opacity-70 group-hover:opacity-100 transition-all duration-500"></div>
      <div className="absolute inset-0 rounded-full bg-gradient-to-br from-cyan-500 to-purple-600 blur-md opacity-50 group-hover:opacity-80 transition-all duration-500 group-hover:scale-110"></div>
      <div className="absolute -inset-1 rounded-full bg-gradient-to-br from-cyan-500 to-purple-600 blur-xl opacity-20 group-hover:opacity-40 transition-all duration-500"></div>
      
      {/* Ambient light pulse animation */}
      <div className="absolute inset-0 rounded-full bg-cyan-500/30 animate-pulse"></div>
    </div>
  );
};

19. Custom Navigation Effects with Framer Motion

For more advanced navigation effects:

import { motion, AnimatePresence } from "framer-motion";

// Inside the desktop navigation
{navigationItems.map((item, index) => (
  <Link key={item.path} href={item.path}>
    <motion.div 
      className="..."
      whileHover={{ y: -2 }}
      whileTap={{ y: 0 }}
      transition={{ type: "spring", stiffness: 400, damping: 17 }}
    >
      <span>{item.label}</span>
      {location === item.path && (
        <motion.div 
          layoutId="nav-indicator"
          className="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-cyan-400 to-purple-500"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.2 }}
        />
      )}
    </motion.div>
  </Link>
))}

20. SimpleGeometry Component - Complete Implementation

Additional implementation for the SimpleHexagon component content:

{/* Background pattern */}
<div className="absolute inset-0 opacity-10" style={{ zIndex: -1 }}>
  <svg
    width="100%"
    height="100%"
    viewBox="0 0 100 100"
    preserveAspectRatio="none"
    className="opacity-20"
  >
    <path
      d="M25 0 L75 0 L100 50 L75 100 L25 100 L0 50 Z"
      stroke="white"
      strokeWidth="0.5"
      fill="none"
    />
    <path
      d="M35 20 L65 20 L80 50 L65 80 L35 80 L20 50 Z"
      stroke="white"
      strokeWidth="0.5"
      fill="none"
    />
  </svg>
</div>

{/* Content Container - ensure content stays within hexagon boundaries */}
<div className="absolute inset-[8%] flex flex-col justify-center items-center">
  {/* Title - adaptive sizing */}
  {heading && (
    <div className="text-center mb-0">
      {React.isValidElement(heading) && 
        typeof heading.type === 'string' && 
        ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(heading.type) ? 
        React.cloneElement(heading as React.ReactElement, {
          className: cn(fontSize.heading, 'font-medium leading-none m-0', (heading.props as any).className || ''),
        }) : heading
      }
    </div>
  )}
  
  {/* Divider */}
  <ShapeDivider width="50%" opacity={30} margin="0" />
  
  {/* Content - kept away from edges with adaptive sizing */}
  <div className="w-full max-w-[80%] flex-grow flex flex-col justify-center items-center overflow-y-auto text-center m-0 p-0">
    {content.map((item, index) => {
      if (React.isValidElement(item) && item.type === 'p') {
        return React.cloneElement(item as React.ReactElement, {
          className: cn(fontSize.content, 'm-0 leading-tight', (item.props as any).className || ''),
          key: `hexagon-content-${index}`
        });
      }
      return item;
    })}
  </div>
  
  {/* Button - hexagon shaped to match container */}
  {button && (
    <div className="mt-0 mb-0 flex justify-center items-center">
      {React.isValidElement(button) && button.type === 'button' ? 
        React.cloneElement(button as React.ReactElement, {
          className: cn(fontSize.button, 'text-center', (button.props as any).className || ''),
          style: {
            clipPath: "polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%)",
            padding: "0.5rem 1rem",
            background: (button.props as any).className?.includes('bg-') 
              ? undefined 
              : "rgba(0, 100, 255, 0.8)",
            border: "1px solid rgba(255, 255, 255, 0.5)",
            boxShadow: "0 0 8px rgba(0, 100, 255, 0.5)",
            textAlign: "center",
            lineHeight: "1"
          }
        }) : button
      }
    </div>
  )}
</div>

21. DynamicContent Component - Error Prevention

To prevent nesting errors like the one shown in the console logs:

const renderTextContent = (textContent: string) => {
  // Check if we need to wrap in another element to prevent nesting errors
  const needsWrapper = parentElementType === 'p';
  
  if (needsWrapper) {
    return <span className={className}>{textContent}</span>;
  }
  
  // If not inside a paragraph, we can use the normal span
  return <span className={className}>{textContent}</span>;
};

22. Custom Hook for Responsive Shape Content

function useResponsiveShape(adaptiveScaling = true) {
  const containerRef = useRef<HTMLDivElement>(null);
  const [fontSize, setFontSize] = useState<{ heading: string; content: string; button: string }>({
    heading: 'text-base',
    content: 'text-xs',
    button: 'text-xs'
  });
  
  useEffect(() => {
    if (!adaptiveScaling) return;
    
    function updateFontSizes() {
      if (!containerRef.current) return;
      
      const containerWidth = containerRef.current.offsetWidth;
      
      // Adaptive font sizing based on container width
      if (containerWidth < 150) {
        setFontSize({
          heading: 'text-xs',
          content: 'text-[10px]',
          button: 'text-[9px]'
        });
      } else if (containerWidth < 250) {
        setFontSize({
          heading: 'text-sm',
          content: 'text-xs',
          button: 'text-xs'
        });
      } else if (containerWidth < 350) {
        setFontSize({
          heading: 'text-base',
          content: 'text-xs',
          button: 'text-xs'
        });
      } else {
        setFontSize({
          heading: 'text-lg',
          content: 'text-sm',
          button: 'text-xs'
        });
      }
    }
    
    // Initial sizing
    updateFontSizes();
    
    // Add resize listener
    window.addEventListener('resize', updateFontSizes);
    
    return () => {
      window.removeEventListener('resize', updateFontSizes);
    };
  }, [adaptiveScaling]);
  
  return { containerRef, fontSize };
}

23. Final CSS Effects
Glow Effects

.cosmic-glow-cyan {
  box-shadow: 0 0 10px rgba(6, 182, 212, 0.5), 0 0 20px rgba(6, 182, 212, 0.3);
}

.cosmic-glow-purple {
  box-shadow: 0 0 10px rgba(147, 51, 234, 0.5), 0 0 20px rgba(147, 51, 234, 0.3);
}

Cosmic Ocean Texture

.cosmic-ocean-texture {
  background-image: 
    linear-gradient(to bottom, rgba(6, 182, 212, 0.05), rgba(147, 51, 234, 0.05)),
    url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
}

Hover Effects

.cosmic-shape-hover {
  transition: all 0.3s ease-in-out;
}

.cosmic-shape-hover:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(6, 182, 212, 0.3);
}

This completes the comprehensive guide for rebuilding the header with all its components, styling, and responsive behavior. The code and specifications provided give you the exact details needed to recreate the header with all its visual elements and interactions.