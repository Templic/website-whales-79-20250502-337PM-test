23. Final CSS Effects
Glow Effects
.cosmic-glow-cyan {
  box-shadow: 0 0 10px rgba(6, 182, 212, 0.5), 0 0 20px rgba(6, 182, 212, 0.3);
}
.cosmic-glow-purple {
  box-shadow: 0 0 10px rgba(147, 51, 234, 0.5), 0 0 20px rgba(147, 51, 234, 0.3);
}
Cosmic Ocean Texture
.cosmic-ocean-texture {
  background-image: 
    linear-gradient(to bottom, rgba(6, 182, 212, 0.05), rgba(147, 51, 234, 0.05)),
    url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
}
Hover Effects
.cosmic-shape-hover {
  transition: all 0.3s ease-in-out;
}
.cosmic-shape-hover:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(6, 182, 212, 0.3);
}
24. Precise Component Positioning
Z-Index Layering System
The header uses a precise z-index system to ensure proper stacking of elements:
/* Z-index hierarchy */
.z-base { z-index: 1; }             /* Base elements */
.z-content { z-index: 10; }         /* Content elements */
.z-overlay { z-index: 20; }         /* Overlays like dropdowns */
.z-important { z-index: 50; }       /* Critical UI elements */
.z-fixed-header { z-index: 100; }   /* Header itself */
.z-modal { z-index: 1000; }         /* Modal dialogs */
Grid Layout for Desktop Navigation
For more precise control over navigation spacing:
<nav className="hidden md:grid grid-flow-col auto-cols-max gap-x-1 ml-6">
  {navigationItems.map((item, index) => (
    <Link 
      key={item.path} 
      href={item.path} 
      className={`px-3 py-2 text-sm font-medium transition-all duration-300 ${
        location === item.path 
          ? 'text-white' 
          : 'text-white/70 hover:text-white'
      }`}
    >
      {/* Link content */}
    </Link>
  ))}
</nav>
Precise Logo Positioning
For exact logo placement and scaling:
<div className="relative h-12 w-12 flex items-center justify-center">
  {/* Logo background elements */}
  
  {/* Logo text positioning */}
  <span className="absolute inset-0 flex items-center justify-center text-white font-bold text-sm tracking-wider">
    DLW
  </span>
  
  {/* Geometric elements in logo - exact positioning */}
  <div className="absolute inset-0 flex items-center justify-center">
    <div 
      className="w-6 h-6 rotate-45 bg-gradient-to-r from-cyan-500/30 to-purple-600/30 rounded-sm"
      style={{
        transform: "rotate(45deg) scale(0.75)",
        transformOrigin: "center",
      }}
    ></div>
  </div>
</div>
Pixel-Perfect Spacing Variables
// Define spacing variables for consistent layout
const spacing = {
  headerVerticalPadding: isScrolled ? 'py-2' : 'py-4',
  logoTextSpacing: 'ml-2 md:ml-3',
  navItemHorizontalPadding: 'px-3',
  navItemVerticalPadding: 'py-2',
  mobilePanelPadding: 'px-4 py-3',
};
// Use in components
<header className={`fixed top-0 w-full ${spacing.headerVerticalPadding}`}>
  {/* Header content */}
</header>
25. Advanced Animation Techniques
Staggered Animation for Navigation Items
// Add this import
import { motion, stagger, useAnimate } from "framer-motion";
// Inside component
const [scope, animate] = useAnimate();
// On mobile menu open
useEffect(() => {
  if (isMobileMenuOpen) {
    animate(
      "li",
      { opacity: 1, y: 0 },
      { duration: 0.2, delay: stagger(0.05) }
    );
  }
}, [isMobileMenuOpen, animate]);
// In JSX for mobile menu
<ul ref={scope} className="...">
  {navigationItems.map((item, index) => (
    <motion.li
      key={item.path}
      initial={{ opacity: 0, y: 10 }}
      className="..."
    >
      {/* Link */}
    </motion.li>
  ))}
</ul>
Scroll-based Parallax Effects for Header Elements
import { useScroll, useTransform, motion } from "framer-motion";
// Inside component
const { scrollY } = useScroll();
const logoScale = useTransform(scrollY, [0, 100], [1, 0.8]);
const navOpacity = useTransform(scrollY, [0, 50], [0.7, 1]);
const backgroundOpacity = useTransform(scrollY, [0, 100], [0.5, 0.9]);
// In JSX
<header 
  style={{ 
    backgroundColor: `rgba(0, 0, 0, ${backgroundOpacity})`,
  }}
>
  <motion.div style={{ scale: logoScale }}>
    {/* Logo */}
  </motion.div>
  
  <motion.nav style={{ opacity: navOpacity }}>
    {/* Navigation */}
  </motion.nav>
</header>
Geometry Animation with SVG Morphing
// For sacred geometry with morphing capability
const MorphingGeometry = ({ type, animate = false }) => {
  const [currentShape, setCurrentShape] = useState(type);
  const shapes = {
    hexagon: "M50,10 L90,30 L90,70 L50,90 L10,70 L10,30 Z",
    star: "M50,5 L61,40 L95,40 L68,62 L79,95 L50,75 L21,95 L32,62 L5,40 L39,40 Z",
    merkaba: "M50,10 L90,90 L10,90 Z M50,90 L10,10 L90,10 Z",
  };
  return (
    <svg viewBox="0 0 100 100">
      <motion.path
        initial={{ d: shapes[currentShape] }}
        animate={{ d: shapes[currentShape] }}
        transition={{ duration: 1, ease: "easeInOut" }}
        fill="none"
        stroke="currentColor"
        strokeWidth="1"
      />
    </svg>
  );
};
Gesture-Based Interactions for Mobile
import { useDragControls, motion } from "framer-motion";
// Inside component
const dragControls = useDragControls();
// In JSX for mobile menu
<motion.div
  drag="y"
  dragControls={dragControls}
  dragConstraints={{ top: 0, bottom: 0 }}
  dragElastic={0.2}
  onDragEnd={(_, info) => {
    if (info.offset.y > 50) {
      setIsMobileMenuOpen(false);
    }
  }}
  className="..."
>
  <div className="w-16 h-1 bg-white/20 rounded-full mx-auto my-2" />
  {/* Mobile menu content */}
</motion.div>
26. Detailed Responsive Breakpoints
// Comprehensive breakpoint system
const breakpoints = {
  sm: '640px',
  md: '768px',
  lg: '1024px',
  xl: '1280px',
  '2xl': '1536px',
};
// Responsive styling for the header
<header className="fixed top-0 z-[100] w-full">
  <div className="
    container mx-auto 
    px-4 sm:px-6 lg:px-8 
    h-16 sm:h-18 md:h-20 
    flex items-center justify-between
  ">
    {/* Logo with responsive sizing */}
    <div className="
      relative 
      h-8 w-8 sm:h-10 sm:w-10 md:h-12 md:w-12
    ">
      {/* Logo content */}
    </div>
    
    {/* Logo text with responsive sizing and hide on smaller screens */}
    <span className="
      hidden xs:inline-block
      font-bold 
      text-sm sm:text-base md:text-xl 
      ml-2 sm:ml-3
    ">
      Dale Loves Whales
    </span>
    
    {/* Navigation with progressively more items as screen grows */}
    <nav className="hidden md:flex lg:space-x-2">
      {/* Limited items on medium screens */}
      {navigationItems.slice(0, windowWidth < 1024 ? 5 : navigationItems.length).map(/*...*/)}
      
      {/* Show more menu on medium screens */}
      {windowWidth < 1024 && (
        <div className="relative">
          <button>More</button>
          <div className="absolute">
            {navigationItems.slice(5).map(/*...*/)}
          </div>
        </div>
      )}
    </nav>
  </div>
</header>
27. Complex Layout Transform for Header Components
Adapting Layout Based on Screen Width
function useResponsiveLayout() {
  const [layout, setLayout] = useState({
    logoSize: 'h-12 w-12',
    navSpacing: 'space-x-4',
    showSearchInHeader: true,
    showSocialLinks: false,
  });
  
  useEffect(() => {
    function updateLayout() {
      if (window.innerWidth < 640) {
        setLayout({
          logoSize: 'h-8 w-8',
          navSpacing: 'space-x-1',
          showSearchInHeader: false,
          showSocialLinks: false,
        });
      } else if (window.innerWidth < 1024) {
        setLayout({
          logoSize: 'h-10 w-10',
          navSpacing: 'space-x-2',
          showSearchInHeader: true,
          showSocialLinks: false,
        });
      } else {
        setLayout({
          logoSize: 'h-12 w-12',
          navSpacing: 'space-x-4',
          showSearchInHeader: true,
          showSocialLinks: true,
        });
      }
    }
    
    updateLayout();
    window.addEventListener('resize', updateLayout);
    return () => window.removeEventListener('resize', updateLayout);
  }, []);
  
  return layout;
}
